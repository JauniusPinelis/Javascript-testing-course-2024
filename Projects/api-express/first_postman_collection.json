{
	"info": {
		"_postman_id": "7c42e387-a7bb-4c04-907a-21867386940d",
		"name": "First Postman collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "7556965"
	},
	"item": [
		{
			"name": "Get items",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"returns 200 status code\", () => {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"item list is not empty\", () => {\r",
							"    const json = pm.response.json();\r",
							"    pm.expect(json).to.be.an('array').that.is.not.empty;\r",
							"})\r",
							"\r",
							"pm.test(\"response json has name and id\", () => {\r",
							"    const json = pm.response.json();\r",
							"\r",
							"    json.forEach((item) => {\r",
							"        pm.expect(item).to.have.property(\"id\")\r",
							"        pm.expect(item).to.have.property(\"name\")\r",
							"    })\r",
							"})\r",
							"\r",
							"pm. test('response completes under 2s', () => {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"})\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/items",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"items"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create item",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"returns 201 status code\", () => {\r",
							"    pm.response.to.have.status(201)\r",
							"})\r",
							"\r",
							"pm.test(\"it ruturns non empty object\", () => {\r",
							"    const json = pm.response.json();\r",
							"    pm.expect(json).to.be.an('object').that.is.not.empty;\r",
							"})\r",
							"\r",
							"pm.test(\"response json has name and id\", () => {\r",
							"    const json = pm.response.json();\r",
							"\r",
							"    pm.expect(json).to.have.property(\"id\")\r",
							"    pm.expect(json).to.have.property(\"name\")\r",
							"})\r",
							"\r",
							"pm. test('response completes under 2s', () => {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"})\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": 3,\r\n    \"name\": \"test\",\r\n    \"description\": \"some description\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/items",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"items"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Item",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"returns 200 status code\", () => {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"it returns non empty object\", () => {\r",
							"    const json = pm.response.json();\r",
							"    pm.expect(json).to.be.an('object').that.is.not.empty;\r",
							"})\r",
							"\r",
							"pm.test(\"response json has name and id\", () => {\r",
							"    const json = pm.response.json();\r",
							"\r",
							"    pm.expect(json).to.have.property(\"id\")\r",
							"    pm.expect(json).to.have.property(\"name\")\r",
							"})\r",
							"\r",
							"pm. test('response completes under 2s', () => {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"})\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": 1,\r\n    \"name\": \"test\",\r\n    \"description\": \"some description\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/items/1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"items",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Item by id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"returns 200 status code\", () => {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"it ruturns non empty object\", () => {\r",
							"    const json = pm.response.json();\r",
							"    pm.expect(json).to.be.an('object').that.is.not.empty;\r",
							"})\r",
							"\r",
							"pm.test(\"response json has name and id\", () => {\r",
							"    const json = pm.response.json();\r",
							"\r",
							"    pm.expect(json).to.have.property(\"id\")\r",
							"    pm.expect(json).to.have.property(\"name\")\r",
							"})\r",
							"\r",
							"pm. test('response completes under 2s', () => {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"})\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/items/1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"items",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Item",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"returns 204 status code\", () => {\r",
							"    pm.response.to.have.status(204)\r",
							"})\r",
							"\r",
							"pm.test(\"it returns empty object\", () => {\r",
							"    pm.expect(pm.response.text()).to.be.empty;\r",
							"})\r",
							"\r",
							"pm. test('response completes under 2s', () => {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"})\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/items/3",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"items",
						"3"
					]
				}
			},
			"response": []
		}
	]
}